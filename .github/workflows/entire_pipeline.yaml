# in order to create CI - automated testing. These folder structure to be folloewed
#.github --> workflows --> <name>.yaml
#coding will be done in this yaml file

# here in this file , coding are done in workflow basis

name : first CI test
on:
  push:
    branches:
      - main # this workflow will be triggered when i try to push to Main bramch

jobs : 
  job1 : 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # "checkout" refers to retrieving the latest code from repository and making it available in your workflow environment.
        # checkout basically copies code from folder to ubuntu maching
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: | # this symbol is used to run below lines sequenclly
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name : Run test
        run : |
          pytest

  job2 :
      needs : job1
      runs-on : ubuntu-latest
      steps : 
        - name: Checkout code 
          uses: actions/checkout@v4
        - name: Login to DockerHub
          uses: docker/login-action@v3 # this action logins to dockerhub
          with : 
            username : ${{secrets.docker_username}} 
            password : ${{secrets.docker_password}}
        - name : build docker image and push to docker hub
          uses : docker/build-push-action@v6
          with:   
            push : true 
            tags : trtejas/cd_ci_pipeline:latest # repo in dockerhub where image should be saved
# loading image from local to aws server (ECR and ECS)
# step 1: login aws and create access key from IAM
  job3 :
      needs : job1
      runs-on : ubuntu-latest
      steps : 
        - name: Checkout code 
          uses: actions/checkout@v4
        - name : configure AWS credentials
          uses : aws-actions/configure-aws-credentials@v1
          with :
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # update secret
            aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_PASSWORD }} # update secret
            aws-region: us-east-1 # region based on selection
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: repo_pipeline # same as repos name created in ECR
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-flask-jan22-2025-live-revision1.json
            container-name: docker_loan_pred # image name provided in aws
            image: ${{ steps.build-image.outputs.image }}
    
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: service_pipeline # service name created in ecs
            cluster: cluster_pipeline # es cluster name provided in aws
            wait-for-service-stability: true